AWSTemplateFormatVersion: '2010-09-09'
Description: 'CD12352 - Infrastructure as Code Project - Udagram'

Parameters:
  VPC:
    Description: The ID of the VPC
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: The ID of the first public subnet
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: The ID of the second public subnet
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Description: The ID of the first private subnet
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: The ID of the second private subnet
    Type: AWS::EC2::Subnet::Id

  ImageId:
    Type: String
    Default: ami-053b0d53c279acc90
    Description: The AMI ID for the EC2 instances
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type
  MinSize:
    Type: Number
    Default: 2
  MaxSize:
    Type: Number
    Default: 5

Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket

  MyServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: AccessS3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${MyS3Bucket}/*"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref MyServerRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref MyTargetGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Matcher:
        HttpCode: 200
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Server
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: HTTP traffic from Load Balancer
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      - Description: HTTPS traffic from Load Balancer
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      SecurityGroupEgress:
      - Description: Allow all outbound traffic
        IpProtocol: -1
        CidrIp: 0.0.0.0/0
          
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start
            cd /var/www/html
            echo "it works! Udagram, Udacity" > index.html
        ImageId: !Ref ImageId
        SecurityGroupIds:
          - !Ref AppServerSecurityGroup
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref MyTargetGroup


Outputs:
  LoadBalancerURL:
    Description: The URL of the load balancer
    Value: !Sub http://${LoadBalancer.DNSName}
    Export:
      Name: LoadBalancerURL
